#!/usr/bin/env python
#encoding=utf-8
'''
	Author: 	OSA开源团队
	Description:	(监控项目及项目报警辅助函数)
	Date: 		2011-08-20
	@ 依赖pyDNS 需要安装pyDNS模块
'''
import DNS ,re ,MYSQLdb,simplejson
import urllib2 ,socket,httplib ,ftplib
import subprocess,time,signal,sys,datetime
from ctrlpy.etc.config import DIRS
from ctrlpy.cmdtosql import *
from ctrlpy.lib.osaUtil import save_log
from ctrlpy.lib.osaPing import Ping


def website_get_domain(host,itemconfig):
	'''
	@获取域名
	@return domain
	'''
	if itemconfig['ip'] != '':
		domain = itemconfig['ip']
	else:
		domain = host
	return domain

def website_get_newUrl(url):
	'''
	@对url进行初步解析替换
	@return newUrl
	'''
	if url.find("http://") != -1:
		newUrl = url.replace("http://","")
	elif url.find("https://") != -1:
		newUrl = url.replace("https://","")
	else:
		newUrl = url
	return newUrl
	
	
def website_url_analyze(url,itemconfig):
	'''
	@url 解析
	'''
	newUrl = website_get_newUrl(url)
	index = newUrl.find("/")
	if index != -1:
		host = newUrl[0:index]
		urlsuffix = newUrl.replace(host,"")
	else:
		host = newUrl
		urlsuffix = "/"
	domain = website_get_domain(host,itemconfig)
	return domain,host,urlsuffix

def website_urlopen_reuslt(url,itemconfig):
	'''
	@访问url,获取返回结果
	@return 元组
	'''
	domain,host,urlsuffix = website_url_analyze(url,itemconfig)
	header = {"Host":host,"Accept": "text/plain"}
	if url.find("https://") != -1:#https访问
		conn = httplib.HTTPSConnection(domain,timeout = MONITOR['timeout'])
	else:#http访问
		conn = httplib.HTTPConnection(domain ,timeout = MONITOR['timeout'])
	try:
		conn.request("GET",urlsuffix,headers = header)
		res = conn.getresponse()
		content = res.read()
		status = res.status
		reason = res.reason
		conn.close()
	except httplib.HTTPException as e:
		return str(0),status,reason ,e
		
	return str(1),status,reason,content

def website_config_check(status,content,itemconfig)
	'''
	@网页存活高级设置判定
	@return 元组
	'''
	#content = result.read()
	#code = str(result.code)
	httpcode = itemconfig['httpcode'].split(',')
	if status in httpcode:
		c1 = 1 #网页存活有两个条件，第一个条件是状态码存在
	else:
		c1 = 0	
	c2 = 1 #假设第二个条件为真：关键字都匹配
	for i in range(len(itemconfig['keywords'].split(','))):
		if not itemconfig['keywords'].split(',')[i] in content:
			c2 = 0	#满足某个关键字不匹配，则条件二为假
	if c1 and c2:
		return str(1)
	else:
		return str(0)
	

def website_alive_check(url,itemconfig):
	'''
	@网页存活检测
	@url:网页地址，itemconfig:网页存活高级设置
	@return 
	'''
	#url访问
	isTrue,status,reason,content = website_urlopen_reuslt(url,itemconfig)
	if isTrue == '0':
		return str(0),status,reason,content
	#高级设置验证
	check = website_config_check(result,itemconfig)
	return check,status,reason,content
	
##########################分割线-----------website 存活验证结束 -------------分割线######################	
	
def ping_alive_check(object)
	'''
	@ping 检测
	@object：表示域名或ip
	'''
	result = Ping(object)
	if result == True:
		return 'alive'
	else:
		return 'die'
	
##########################分割线-----------ping 存活验证结束 -------------分割线######################

def tcp_connect_check(ip,port):
	'''
	@Tcp 连接检测 | hostSocket 已经存在同类函数
	'''
	pass
	
def udp_connect_check(ip,port):
	'''
	@Udp 连接检测 | hostSocket 已经存在同类函数
	'''
	pass
	
##########################分割线-----------Tcp与Udp 存活验证结束 -------------分割线######################

def ftp_get_port(itemconfig):
	'''
	@获取ftp port
	'''
	if itemconfig['port'] != '':
		port = itemconfig['port']
	else:
		port = 21
	return port

def ftp_get_logins(itemconfig):
	'''
	@获取ftp 登录用户名和密码
	'''
	if itemconfig['default'] == '1':#匿名登录
		return '',''
	else:#验证登录
		return itemconfig['ftpuser'],itemconfig['ftppass']

def ftp_connect_check(host,itemconfig):
	'''
	@ftp 连接检测
	'''
	ftp = ftplib.FTP()
	port = ftp_get_port(itemconfig)
	ftpuser ,ftppass = ftp_get_logins(itemconfig)
	try:
		ftp.connction(str(host),int(port))
		if ftpuser == '':
			ftp.login()
		else:
			ftp.login(ftpuser,ftppass)
	except exception as e:
		return False
	return True
	
##########################分割线-----------Ftp 存活验证结束 -------------分割线######################

def dns_get_qtype(itemconfig):
	'''
	@获取dns qtype
	'''
	qtype = ''
	if itemconfig['qtype'] != '':
		qtype = itemconfig['qtype']
	return str(qtype)

def dns_get_iplist(itemconfig):
	'''
	@获取dns ip列表
	'''
	iplist = []
	if itemconfig['iplist'] != '':
		for ip in itemconfig['iplist'].split(','):
			iplist.append(ip)
	return iplist
	
def dns_get_server(itemconfig):
	'''
	@获取指定的dns服务器
	'''
	if itemconfig['server'] != '':
		return itemconfig['server']
	return False

def dns_ip_check(result,ip):
	'''
	@当dns qtype == 'A'时，指定ip匹配
	'''
	for i in result:
		if i['data'] == ip:
			return True
		else:
			continue
	return False

def dns_iplist_check(result,iplist):
	'''
	@当dns qtype == 'A'时，指定iplist匹配
	'''
	if not len(result):
		return str(0),'Not found'
	if not len(iplist):#说明不需要匹配
		return str(1),result
	for ip in iplist:
		if dns_ip_check(result,ip) == False:
			return str(0),'Not match'
		else:
			continue
	return str(1),result

def dns_server_check(host,itemconfig):
	'''
	@dns 检测
	@依赖pyDNS模块
	'''
	server = dns_get_server(itemconfig)
	dnstype = dns_get_qtype(itemconfig)
	iplist = dns_get_iplist(itemconfig)
	if server != False:
		DNS.defaults['server'] = server
	DNS.DiscoverNameServers()
	request = DNS.Request()
	try:
		result = request.req(name = host,qtype=	dnstype)
	except exception as e:
		return str(0),e
	if dnstype == 'A':
		return dns_iplist_check(result.answers,iplist)
	else :
		if not len(result.answers):
			return str(0),'Not found'
		else:
			return str(1),result.answers
			

##########################分割线-----------DNS 存活验证结束 -------------分割线######################

def apache_get_connections(content):
	'''
	@根据apache status 页面内容获取连接数等信息
	@readNum:读请求连接，writeNum：发响应请求连接，keepNum:持久连接，closeNum：关闭连接，waitNum：等待连接
	'''
	readNum = writeNum = keepNum = closeNum = waitNum = 0
	result = re.search("<pre>([\s\S]*?)</pre>",content)
	if result is not None:
		resstr = result.groups()[0]
		readNum = len(re.findall("R",resstr))
		writeNum = len(re.findall("W",resstr))
		keepNum = len(re.findall("K",resstr))
		closeNum = len(re.findall("C",resstr))
		waitNum = len(re.findall("_",resstr))
	return readNum ,writeNum ,keepNum ,closeNum ,waitNum
	
def apache_get_basicinfo(content):
	'''
	@根据apache status 页面内容获取apache 吞吐率等字符信息
	'''
	visitNum = rateNum = capacityNum = 0
	result = re.findall("<dt>.*?</dt>",content)
	for res in result:
		if res.find("Total accesses")!=-1:
			newres = res.replace("<dt>","")
			newres = newres.replace("</dt>","")
			newres = newres.split("-")
			visitNum = int(newres[0].replace("Total accesses:","").strip(" "))
		if res.find("requests/sec")!=-1:
			newres = res.replace("<dt>","")
			newres = newres.replace("</dt>","")
			newres = newres.split("-")
			rateNum = float(newres[0].split(' ')[0])
			capacityNum = float(newres[2].strip(" ").split(' ')[0])
	return visitNum,rateNum,capacityNum	
	
def apache_status_analyze(url):
	'''
	@apache status 页面分析
	'''
	try:
		socket.setdefaulttimeout(MONITOR['timeout'])
		result = urllib2.urlopen(url)
	except exception as e:
		return str(0),e
	content = result.read()
	readNum ,writeNum ,keepNum ,closeNum ,waitNum = apache_get_connections(content)
	totalNum = readNum + writeNum 
	visitNum,rateNum,capacityNum = apache_get_basicinfo(content)
	apache_json = {"totalNum":totalNum,"readNum":readNum,"writeNum":writeNum,"keepNum":keepNum,"closeNum":closeNum,"waitNum":waitNum,"visitNum":visitNum,"rateNum":rateNum,"capacityNum":capacityNum}
	return str(1),apache_json
	
##########################分割线-----------apache server-status 数据处理结束 -------------分割线######################	

def ngnix_get_baseinfo(content):
	'''
	@ngnix status 页面获取ngnix性能数据
	'''
	readNum = writeNum = waitNum = visitNum = totalNum = acceptNum = 0
	content = content.split("\n")
	totalNum = int(content[0].split(":")[1].strip(" "))
	visitNum = int(content[2].strip(" ").split(" ")[2])
	acceptNum = int(content[2].strip(" ").split(" ")[0])
	tempstr = content[3].replace("Reading: ","").replace("Writing: ","").replace("Waiting: ","")
	tempstr = tempstr.strip(" ").split(" ")
	readNum = int(tempstr[0])
	writeNum = int(tempstr[1])
	waitNum = int(tempstr[2])
	return readNum , writeNum , waitNum , visitNum , totalNum ,acceptNum
	
def ngnix_status_analyze(url):
	'''
	@ngnix status 页面分析
	@json 格式还待处理
	'''
	try:
		socket.setdefaulttimeout(MONITOR['timeout'])
		result = urllib2.urlopen(url)
	except exception as e:
		return str(0),e
	content = result.read()
	readNum , writeNum , waitNum , visitNum , totalNum ,acceptNum = ngnix_get_baseinfo(content)
	ngnix_json = {"totalNum":totalNum,"readNum":readNum,"writeNum":writeNum,"waitNum":waitNum,"visitNum":visitNum,"acceptNum":acceptNum}
	return str(1),ngnix_json

##########################分割线-----------ngnix server-status 数据处理结束 -------------分割线######################	

def lighttpd_get_rate(content):
	'''
	@获取 获取lightttpd 的吞吐率
	'''
	rate = 0
	result = re.findall("<tr><td>.*?</td></tr>",content)
	str =  result[7].replace("<tr><td>Requests</td><td class=\"string\">","")
    rate = int(str.split(" ")[0])
	return rate
	
def lighttpd_get_baseinfo(content):
	'''
	@获取 lighttpd 的并发连接信息
	'''
	rate = lighttpd_get_rate(content)
	readNum = handleNum = writeNum = closeNum = connectNum = totalNum = rpostNum = 0
	totalstr = re.findall("<br>.*?connections</br>",content)
	totalNum = int(totalstr.split(" ")[0].replace("<br>",""))
	tmpstr = re.search("connections</br>([\s\S].*?)</pre>",content)
	if tmpstr is not None:
		resstr = tmpstr.groups()[0]
		readNum = len(re.findall("r",resstr))
		writeNum = len(re.findall("W",resstr))
		handleNum = len(re.findall("h",resstr))
		closeNum = len(re.findall("C",resstr))
		connectNum = len(re.findall(".",resstr))
		rpostNum = len(re.findall("R",resstr))
	lighttpd_json={"rate":rate,"readNum":readNum,"handleNum":handleNum,"writeNum":writeNum,"closeNum":closeNum,"connectNum":connectNum,"totalNum":totalNum,"rpostNum":rpostNum}
	return lighttpd_json
	
def lighttpd_status_analyze(url):
	'''
	@lighttpd status 页面分析
	@json 格式数据还需额外处理
	'''
	try:
		socket.setdefaulttimeout(MONITOR['timeout'])
		result = urllib2.urlopen(url)
	except exception as e:
		return str(0),e
	content = result.read()
	lighttpd_json = lighttpd_get_baseinfo(content)
	return str(1),lighttpd_json
	
##########################分割线-----------lighttpd server-status 数据处理结束 -------------分割线######################
	
def mysql_get_status(status):
	'''
	@获取 mysql 中需要的status
	'''
	status_list = {}
	for state in status:
		if state[0] == 'Com_change_db':
			status_list['Com_change_db'] = int(state[1]) 
		if state[0] == 'Com_delete':
			status_list['Com_delete'] = int(state[1])
		if state[0] == 'Com_insert':
			status_list['Com_insert'] = int(state[1])
		if state[0] == 'Com_select':
			status_list['Com_select'] = int(state[1])
		if state[0] == 'Com_update':
			status_list['Com_update'] = int(state[1])
		if state[0] == 'Threads_cached':
			status_list['Threads_cached'] = int(state[1])
		if state[0] == 'Threads_connected':
			status_list['Threads_connected'] = int(state[1])
		if state[0] == 'Threads_created':
			status_list['Threads_created'] = int(state[1])
		if state[0] == 'Threads_running':
			status_list['Threads_running'] = int(state[1])
		if state[0] == 'Aborted_clients':
			status_list['Aborted_clients'] = int(state[1])
		if state[0] == 'Aborted_connects':
			status_list['Aborted_connects'] = int(state[1])
		if state[0] == 'Qcache_free_blocks':
			status_list['Qcache_free_blocks'] = int(state[1])
		if state[0] == 'Qcache_free_memory':
			status_list['Qcache_free_memory'] = int(state[1])
		if state[0] == 'Qcache_hits':
			status_list['Qcache_hits'] = int(state[1])
		if state[0] == 'Qcache_total_blocks':
			status_list['Qcache_total_blocks'] = int(state[1])
		if state[0] == 'Connections':
			status_list['Connections'] = int(state[1])
		if state[0] == 'Aborted_clients':
			status_list['Aborted_clients'] = int(state[1])
		if state[0] == 'Table_locks_immediate':
			status_list['Table_locks_immediate'] = int(state[1])
		if state[0] == 'Table_locks_waited':
			status_list['Table_locks_waited'] = int(state[1])
		if state[0] == 'Questions':
			status_list['Questions'] = int(state[1])
		if state[0] == 'Bytes_sent':
			status_list['Bytes_sent'] = int(state[1])
		if state[0] == 'Bytes_received':
			status_list['Bytes_received'] = int(state[1])
	return status_list	

def mysql_get_variables(variables):
	'''
	@mysql 获取需要的variables
	'''
	variables_list = {}
	for varis in variables:
		if varis[0] == 'max_connections':
			variables_list['max_connections'] = int(varis[1])
		if varis[0] == 'query_cache_size':
			variables_list['query_cache_size'] = int(varis[1])
	return variables_list
	
def mysql_get_querycache(status_list,variables_list):
	'''
	@mysql 计算查询缓存利用率
	'''
	query_cache_size = variables_list['query_cache_size']
	qcache_free_memory = status_lsit['Qcache_free_memory']
	query_cache_rate = (query_cache_size/qcache_free_memory)*100%
	return query_cache_rate

def mysql_get_visitcache(status_lsit):
	'''
	@mysql 计算缓存访问率
	'''
	threads_created = status_list['Threads_created']
	connections = status_list['Connections']
	visit_cache_rate = (threads_created/connections)*100%
	return visit_cache_rate
	
def mysql_get_scrapcache(status_list):
	'''
	@mysql 计算查询缓存碎片率
	'''
	qcache_free_blocks = status_list['Qcache_free_blocks']
	qcache_total_blocks = status_list['Qcache_total_blocks']
	scrap_cache_rate = (qcache_free_blocks/qcache_total_blocks)*100%
	return scrap_cache_rate
	
def mysql_get_hitcache(status_list):
	'''
	@mysql 计算查询缓存命中率
	'''
	qcache_hits = status_list['Qcache_hits']
	com_select = status_list['Com_select']
	qcache_total = qcache_hits + com_select
	hits_cache_rate = (qcache_hits/qcache_total)*100%
	return hits_cache_rate

def mysql_alarm_tconnected(itemconfig,status_list):
	'''
	@mysql 报警指标Threads_connected
	'''
	switch = itemconfig['Threads_connected']['switch']
	value = itemcongig['Threads_connected']['value']
	if switch == '>':
		if status_list['Threads_connected']>value:
			return True #说明符合报警条件
	elif switch == '<':
		if status_list['Threads_connected']<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mysql_alarm_trunning(itemconfig,status_list):
	'''
	@mysql 报警指标Threads_running
	'''
	switch = itemconfig['Threads_running']['switch']
	value = itemcongig['Threads_running']['value']
	if switch == '>':
		if status_list['Threads_running']>value:
			return True #说明符合报警条件
	elif switch == '<':
		if status_list['Threads_running']<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mysql_alarm_aclients(itemconfig,status_list,last_aclients):
	'''
	@mysql 报警指标Abored_clients
	@说明 Abored_clients_now = status_list['Abored_clients'] - Abored_clients_last
	'''
	switch = itemconfig['Abored_clients']['switch']
	value = itemcongig['Abored_clients']['value']
	cNum = status_list['Abored_clients'] - last_aclients
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mysql_alarm_aconnects(itemconfig,status_list,last_aconnects):
	'''
	@mysql 报警指标Abored_clients
	@说明 Abored_connects_now = status_list['Abored_connects'] - Abored_connects_last
	'''
	switch = itemconfig['Abored_connects']['switch']
	value = itemcongig['Abored_connects']['value']
	cNum = status_list['Abored_connects'] - last_aconnects
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mysql_alarm_querycache(itemconfig,qurey_cache_rate):
	'''
	@mysql 报警指标：缓存利用率
	'''
	switch = itemconfig['query_cache_rate']['switch']
	value = itemcongig['query_cache_rate']['value']
	if switch == '>':
		if qurey_cache_rate>value:
			return True #说明符合报警条件
	elif switch == '<':
		if qurey_cache_rate<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mysql_alarm_others(key ,itemconfig,status):
	'''
	@mysql 自定义指标报警
	@还需改善，还没考虑完整
	'''
	switch = itemconfig[key]['switch']
	value = itemconfig[key]['value']
	other_value = 0
	for state in status：
		if state[0] == key:
			other_value = int(state[1])
	if switch == '>':
		if other_value>value:
			return True #说明符合报警条件
	elif switch == '<':
		if other_value<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
	
def mysql_alarm_analyze(itemconfig,status_list ,last_aclients ,last_aconnects ,qurey_cache_rate ,status):
	'''
	@mysql 对报警指标进行分析
	'''
	for key in itemconfig.keys():
		if key == 'Threads_connected' and mysql_alarm_tconnected(itemconfig,status_list) == True:
			return True #表示需要报警
		elif key == 'Threads_running' and mysql_alarm_trunning(itemconfig,status_list) == True:
			return True
		elif key == 'Abored_clients' and mysql_alarm_aclients(itemconfig,status_list,last_aclients) == True:
			return True
		elif key == 'Abored_connects' and mysql_alarm_aconnects(itemconfig,status_list,last_aconnects) == True:
			return True
		elif key == 'query_cache_rate' and mysql_alarm_querycache(itemconfig,qurey_cache_rate) == True:
			return True
		else :
			if mysql_alarm_others(key ,itemconfig,status) == True:
				return True
	return False #表示不需要报警	
	
def mysql_deal_baseinfo(status_list,variables_list):
	'''
	@mysql 对status_list和variables_list的数据进行处理，返回需要采集的数据
	'''
	status_list['query_cache_rate'] = mysql_get_querycache(status_list,variables_list)
	status_list['visit_cahce_rate'] = mysql_get_visitcache(status_lsit)
	status_list['scrap_cache_rate'] = mysql_get_scrapcache(status_list)
	status_list['hits_cache_rate'] = mysql_get_hitcache(status_list)
	status_list['max_connections'] = variables_list['max_connections']
	return status_list
	
	
def mysql_status_analyze(object,itemconfig,last_aclients ,last_aconnects):
	'''
	@mysql 服务状态与性能分析
	@整体已完成，但还需要调优
	'''
	try:
		con = MYSQLdb.connect(host=object,port=itemconfig['port'],user=itemconfig['user'],passwd=itemconfig['passwd'])
	except exception as e:
		return str(0),'exception',e
	cursor=con.cursor()
	cursor.execute('show global status;')
	status = cursor.fetchall()
	cursor.execute('show global variables')
	variables = cursor.fetchall()
	status_list = mysql_get_status(status)
	variables_list = mysql_get_variables(variables)
	mysql_json = mysql_deal_baseinfo(status_list,variables_list)
	isAlarm = mysql_alarm_analyze(itemconfig,status_list ,last_aclients ,last_aconnects ,qurey_cache_rate ,status)
	if isAlarm == True :
		return str(0) ,'alarm' ,mysql_json
	else:
		return str(1) ,'normal',mysql_json
	

##########################分割线-----------mysql status 数据处理结束 -------------分割线######################

def mongodb_get_lockinfo(info):
	'''
	@mongodb 获取关于锁信息
	'''
	lockinfo = {}
	lockinfo['ratio'] = info['serverStatus']['globalLock']['ratio']
	lockinfo['total'] = info['serverStatus']['globalLock']['total']
	lockinfo['readers'] = info['serverStatus']['globalLock']['currentQueue']['readers']
	lockinfo['writers'] = info['serverStatus']['globalLock']['currentQueue']['writers']
	return lockinfo
	
def mongodb_get_queryrateinfo(info):
	'''
	@mongodb 获取查询吞吐率信息
	'''
	queryrete = info['serverStatus']['opcounters']
	return queryrate
	
def mongodb_get_baseinfo(info):
	'''
	@mongodb 获取内存等基本信息
	'''
	baseinfo = {}
	baseinfo['used_mem'] = info['serverStatus']['mem']['resident']
	baseinfo['used_space'] = info['serverStatus']['mem']['mapped']
	baseinfo['page_faults'] = info['serverStatus']['extra_info']['page_faults']
	baseinfo['curr_connects'] = info['serverStatus']['connections']['current']
	baseinfo['able_connects'] = info['serverStatus']['connections']['available']
	hits = info['serverStatus']['indexCounters']['btree']['hits']
	misses = info['serverStatus']['indexCounters']['btree']['misses']
	baseinfo['indexrate'] = (hits/(hits+misses))*100%
	baseinfo['accesses'] = info['serverStatus']['indexCounters']['btree']['accesses']
	return baseinfo


def mongodb_alarm_tconnected(itemconfig,baseinfo):
	'''
	@mongodb 报警指标curr_connects
	'''
	switch = itemconfig['curr_connects']['switch']
	value = itemcongig['curr_connects']['value']
	cNum = baseinfo['curr_connects']
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mongodb_alarm_ratio(itemconfig,lockinfo):
	'''
	@mongodb 报警指标ratio(锁定指标比例)
	'''
	switch = itemconfig['lock_ratio']['switch']
	value = itemcongig['lock_ratio']['value']
	cNum = lockinfo['ratio']
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def mongodb_alarm_pagenum(itemconfig,baseinfo ,last_pagefaults ,sec):
	'''
	@mongodb 报警指标page_num
	@分页次数 数值/分  ：计算方式 page_faults（差值）/时间（分钟）
	'''
	switch = itemconfig['page_num']['switch']
	value = itemcongig['page_num']['value']
	pagenum = baseinfo['page_faults'] - last_pagefaults
	pagenum = pagenum/sec
	if switch == '>':
		if pagenum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if pagenum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
	
def mongodb_alarm_analyze(itemconfig,baseinfo,lockinfo,last_pagefault,sec):
	'''
	@mongodb 报警条件分析
	'''
	for key in itemconfig.keys():
		if key == 'curr_connects' and mongodb_alarm_tconnected(itemconfig,baseinfo) == True:
			return True #表示需要报警
		elif key == 'lock_ratio' and mongodb_alarm_usedmem(itemconfig,baseinfo) == True:
			return True
		elif key == 'page_num' and mongodb_alarm_pagenum(itemcongig,baseinfo) == True:
			return True
	return False #表示不需要报警

def mongodb_deal_infos(baseinfo,lockinfo,rateinfo):
	'''
	@mongodb 处理获取的数据
	'''
	mongodb_info['baseinfo'] = baseinfo
	mongodb_info['lockinfo'] = lockinfo
	mongodb_info['rateinfo'] = rateinfo
	return mongodb_info
	
def mongodb_status_analyze(url,itemconfig,last_pagefault,sec):
	'''
	@mongodb 状态页分析
	'''
	try:
		socket.setdefaulttimeout(MONITOR['timeout'])
		result = urllib2.urlopen(url)
	except exception as e:
		return str(0),e
	content = result.read()
	info = simplejson.loads(content)
	lockinfo = mogodb_get_lockinfo(info)
	baseinfo = mongodb_get_baseinfo(info)
	rateinfo = mongodb_get_queryrateinfo(info)
	mongodb_info = mongodb_deal_infos(baseinfo,lockinfo,rateinfo)
	isAlarm = mongodb_alarm_analyze(itemconfig,baseinfo,lockinfo,last_pagefault,sec)
	if isAlarm == True:
		return str(0) ,mongodb_info
	else:
		return str(1) ,mongodb_info
	
	

##########################分割线-----------mongodb status 数据处理结束 -------------分割线######################

def memcache_get_baseinfo(info):
	'''
	@memcache 获取缓存命中率等基本信息
	'''
	baseinfo = {}
	indexrate = (info['get_hits']/(info['get_hits']+info['get_misses']))*100%
	baseinfo['indexrate'] = indexrate
	baseinfo['curr_connects'] = info['curr_connections']
	baseinfo['total_connects'] = info['total_connections']
	baseinfo['used_mem'] = info['curr_item']*info['bytes'] #单位bytes
	baseinfo['curr_item'] = info['curr_item']
	baseinfo['bytes_read'] = info['bytes_read']
	baseinfo['bytes_written'] = info['bytes_written']
	baseinfo['spacerate'] = (baseinfo['used_mem']/info['limit_maxbytes'])*100%
	return baseinfo

def memcache_alarm_tconnected(itemconfig,baseinfo):
	'''
	@memcache 报警指标curr_connections
	'''
	switch = itemconfig['curr_connects']['switch']
	value = itemcongig['curr_connects']['value']
	cNum = baseinfo['curr_connects']
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def memcache_alarm_usedmem(itemconfig,baseinfo):
	'''
	@memcache 报警指标used_memory
	'''
	switch = itemconfig['used_memory']['switch']
	value = itemcongig['used_memory']['value']
	cNum = baseinfo['used_mem']/1024
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警

def memcache_alarm_others(key,itemconfig,info):
	'''
	@memcache 自定义指标 others
	'''
	if key not in info.keys():
		return False #不存在指标名字
	switch = itemconfig[key]['switch']
	value = itemconfig[key]['value']
	other_value = info[key]
	if switch == '>':
		if other_value>value:
			return True #说明符合报警条件
	elif switch == '<':
		if other_value<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
	
def memcache_alarm_analyze(itemconfig,baseinfo,info):	
	'''
	@memcache 报警条件分析
	'''
	for key in itemconfig.keys():
		if key == 'curr_connects' and memcache_alarm_tconnected(itemconfig,baseinfo) == True:
			return True #表示需要报警
		elif key == 'used_memory' and memcache_alarm_usedmem(itemconfig,baseinfo) == True:
			return True
		else :
			if memcache_alarm_others(key ,itemconfig,info) == True:
				return True
	return False #表示不需要报警
	
def memcache_status_analyze(url,itemconfig):
	'''
	@memcache 状态页分析
	'''
	try:
		socket.setdefaulttimeout(MONITOR['timeout'])
		result = urllib2.urlopen(url)
	except exception as e:
		return str(0),e
	content = result.read()
	info = simplejson.loads(content)
	baseinfo = memcache_get_baseinfo(info)
	isAlarm = memcache_alarm_analyze(itemconfig,baseinfo,info)
	if isAlarm == True:
		return str(0) ,baseinfo
	else:
		return str(1) ,baseinfo

##########################分割线-----------memcache status 数据处理结束 -------------分割线######################

def redis_get_baseinfo(info):
	'''
	@redis 获取内存使用等基本信息
	'''
	baseinfo = {}
	baseinfo['used_mem'] = info['used_memory']
	baseinfo['connected_slave'] = info['connected_slave']
	baseinfo['pubsub_channels'] = info['pubsub_channels']
	baseinfo['pubsub_patters'] = info['pubsub_patters']
	baseinfo['blocked_clients'] = info['blocked_clients']
	baseinfo['connected_clients'] = info['connected_clients']
	baseinfo['indexrate'] = info['keyspace_hits']/(info['keyspace_hits']+info['keyspace_misses'])*100%
	baseinfo['total_command'] = info['total_commands_processed']
	baseinfo['total_connects'] = info['total_connections_received']
	return baseinfo
	
def redis_alarm_tconnected(itemconfig,baseinfo):
	'''
	@redis 报警指标connected_clients
	'''
	switch = itemconfig['connected_clients']['switch']
	value = itemcongig['connected_clients']['value']
	cNum = baseinfo['connected_clients']
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def redis_alarm_usedmem(itemconfig,baseinfo):
	'''
	@redis 报警指标used_memory 获取的单位bytes 
	@used_memory/1024 转化为KB
	'''
	switch = itemconfig['used_memory']['switch']
	value = itemcongig['used_memory']['value']
	cNum = baseinfo['used_mem']/1024
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def redis_alarm_indexrate(itemconfig,baseinfo):
	'''
	@redis 报警指标redis 命中率
	'''
	switch = itemconfig['index_rate']['switch']
	value = itemcongig['index_rate']['value']
	cNum = baseinfo['indexrate']
	if switch == '>':
		if cNum>value:
			return True #说明符合报警条件
	elif switch == '<':
		if cNum<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
def redis_alarm_others(key,itemconfig,info):
	'''
	@redis 自定义其他指标报警分析
	'''
	if key not in info.keys():
		return False #不存在指标名字
	switch = itemconfig[key]['switch']
	value = itemconfig[key]['value']
	other_value = info[key]
	if switch == '>':
		if other_value>value:
			return True #说明符合报警条件
	elif switch == '<':
		if other_value<value:
			return True #说明符合报警条件
	return False #说明不需要报警
	
	
def redis_alarm_analyze(itemconfig,baseinfo,info):
	'''
	@redis 报警条件分析
	'''
	for key in itemconfig.keys():
		if key == 'connected_clients' and redis_alarm_tconnected(itemconfig,baseinfo) == True:
			return True #表示需要报警
		elif key == 'used_memory' and redis_alarm_usedmem(itemconfig,baseinfo) == True:
			return True
		elif key == 'index_rate' and redis_alarm_indexrate(itemconfig,baseinfo) == True:
			return True
		else :
			if redis_alarm_others(key ,itemconfig,info) == True:
				return True
	return False #表示不需要报警
	

def redis_status_analyze(url,itemconfig):
	'''
	@redis 状态页分析
	'''
	try:
		socket.setdefaulttimeout(MONITOR['timeout'])
		result = urllib2.urlopen(url)
	except exception as e:
		return str(0),e
	content = result.read()
	info = simplejson.loads(content)
	baseinfo = redis_get_baseinfo(info)
	isAlarm = redis_alarm_analyze(itemconfig,baseinfo,info)
	if isAlarm == True:
		return str(0) ,baseinfo
	else:
		return str(1) ,baseinfo
	
##########################分割线-----------redis status 数据处理结束 -------------分割线######################	
	
if __name__ == '__main__':	
	pass 
	

